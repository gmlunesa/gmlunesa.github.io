{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-js","path":"/blog/net-6-global-using-directives/","result":{"data":{"markdownRemark":{"html":"<p>A long and extensive list of <code class=\"language-text\">using</code> directives at the top of a <code class=\"language-text\">.cs</code> or <code class=\"language-text\">.razor</code> file is a familiar sight as a C# developer. The more dependencies you have, the longer this list goes. Some apply the <code class=\"language-text\">#region</code> directive on this part of the code, while others utilize tinker with their IDE setting— just to be able to collapse this area.</p>\n<p>This convention has been around since .NET Framework 1.0 was launched in the year 2002. Although there is nothing technically wrong with this, it clutters the top space of the files. Additionally, many common libraries are duplicated across multiple files even under same namespaces.</p>\n<p>As of <a href=\"https://devblogs.microsoft.com/dotnet/welcome-to-csharp-10/\">November 2021</a>, developers now have an option to address this issue through C# 10's <strong>global <code class=\"language-text\">using</code> directive</strong>.</p>\n<h2>Global Using Directive</h2>\n<p>With this new feature, a developer may add the <code class=\"language-text\">global</code> modifier to a <code class=\"language-text\">using</code> directive, to signify that the qualified namespace is applied to all files during compilation.</p>\n<h3>Syntax</h3>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">global</span> <span class=\"token keyword\">using</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">namespace</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The global modifier may also be combined with the <code class=\"language-text\">static</code> modifier or applied to a <code class=\"language-text\">using alias</code> directive.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">global</span> <span class=\"token keyword\">using</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Math</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Some rules to keep track of:</p>\n<ul>\n<li><code class=\"language-text\">global using</code> directives must appear before all <code class=\"language-text\">using</code> directives without the global modifier</li>\n<li><code class=\"language-text\">global using</code> directives must appear before all namespace and type declarations in the file</li>\n</ul>\n<p>Moreover, the order of <code class=\"language-text\">global using</code> directives does not matter, either in a single file, or between multiple files. The <code class=\"language-text\">global using</code> directives may be placed in any source file, but personally, I like to keep them all in one file since it's more organized in that manner.</p>\n<h2>Implicit Global Using Directives</h2>\n<p>.NET 6 also offers a set of <strong>implicit</strong> global using directives for projects for the most common libraries. This means that the compiler will automatically add a bunch of namespaces based on the project type, which will then be available out of the box.</p>\n<p>As an example, the following libraries are implicitly added in a console application, which we do not have to specify them.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Http</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You may deactivate the implicit global using directives by adding this code to the <code class=\"language-text\">.csproj</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ImplicitUsings</span><span class=\"token punctuation\">></span></span>disable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ImplicitUsings</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>Requirements</h2>\n<p>To be able to use the <code class=\"language-text\">global using</code> directives, you must have the following:</p>\n<ul>\n<li><a href=\"https://dotnet.microsoft.com/en-us/download/dotnet/6.0\">.NET 6 SDK</a></li>\n</ul>\n<h2>Reflection</h2>\n<p>This newly added feature is helpful in maintaining the cleanliness of our source files. However, before we use the <code class=\"language-text\">global using</code> directives in different libraries, we must first consider and assess the situation.</p>\n<ul>\n<li>Will it introduce any naming conflicts in the project? If so, will aliasing the namespace be an option?</li>\n<li>Will the directive be used in one file? If so, there is no need to add it in the global scope.</li>\n</ul>\n<p>If you would like to learn more about .NET 6 and C# 10, please check the following references.</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-10#global-using-directives\">What's new in C# 10</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-6\">What's new in .NET 6</a></li>\n</ul>","excerpt":"A long and extensive list of  directives at the top of a  or  file is a familiar sight as a C…","frontmatter":{"date":"December 11, 2021","dateOriginal":"2021-12-11","title":".NET 6: Global Using Directives","tag":"C#","tags":[".NET","C#"],"description":".NET 6: Global Using Directives","slug":"/blog/net-6-global-using-directives","featuredImage":{"publicURL":"/static/50b720862133f66354e9742f44b70018/featuredImage.png","childrenImageSharp":[{"fluid":{"src":"/static/50b720862133f66354e9742f44b70018/ee604/featuredImage.png"}}]}}}},"pageContext":{"id":"570266ae-893d-508a-8951-178e36df4c8b","frontmatter__slug":"/blog/net-6-global-using-directives","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["321327506"]}